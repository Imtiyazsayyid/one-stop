// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Grade {
  id   Int    @id @default(autoincrement())
  name String

  subject      Subject[]
  student      Student[]
  // lectureGroup LectureGroup[]
  // teachers     TeacherGradeMapper[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Board {
  id   Int    @id @default(autoincrement())
  name String
  key  String

  subjects     Subject[]
  students     Student[]
  // lectureGroup LectureGroup[]
  // teachers     TeacherBoardMapper[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Subject {
  id           Int                    @id @default(autoincrement())
  name         String
  img          String     @db.Text
  key          String
  board_id     Int
  board        Board                  @relation(fields: [board_id], references: [id])
  grade_id     Int
  grade        Grade                  @relation(fields: [grade_id], references: [id])
  chapters     Chapter[]
  students     StudentSubjectMapper[]
  lectureGroups LectureGroup[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Chapter {
  id         Int     @id @default(autoincrement())
  name       String
  chapter_number  Int
  subject_id Int
  subject    Subject @relation(fields: [subject_id], references: [id])
  topics     Topic[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Topic {
  id             Int            @id @default(autoincrement())
  name           String
  topic_number   Int?
  description    String?        @db.Text
  video          String?        @db.Text
  pdf            String?        @db.Text

  chapter_id     Int
  chapter        Chapter        @relation(fields: [chapter_id], references: [id])
  quiz_questions QuizQuestion[]
  quiz_attempts  QuizAttempts[]
  students_completed_topic CompletedTopics[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model QuizQuestion {
  id            Int    @id @default(autoincrement())
  question      String
  topic_id      Int
  topic         Topic  @relation(fields: [topic_id], references: [id])
  correctOption Int?
  correctAnswer String? @db.Text

  type    QuizQuestionType
  options QuizQuestionOption[]
  // answers QuizQuestionAnswer[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model QuizQuestionOption {
  id               Int          @id @default(autoincrement())
  text             String
  option_number    Int
  quiz_question_id Int
  quiz_question    QuizQuestion @relation(fields: [quiz_question_id], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

// model QuizQuestionAnswer {
//   id            Int    @id @default(autoincrement())
//   question_id   Int
//   question      QuizQuestion @relation(fields: [question_id], references: [id])
//   topic_id      Int
//   topic         Topic  @relation(fields: [topic_id], references: [id])
//   answer        String @db.Text
//   student_id    Int
//   student       Student @relation(fields: [student_id], references: [id])

//   status     Boolean  @default(true)
//   created_at DateTime @default(now())
//   updated_at DateTime @default(now())
// }

model QuizAttempts {
  id            Int    @id @default(autoincrement())
  topic_id      Int
  topic         Topic  @relation(fields: [topic_id], references: [id])
  score         Float
  student_id    Int
  student       Student @relation(fields: [student_id], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

enum QuizQuestionType {
  MULTIPLE_CHOICE
  LONG_ANSWER
}


model Student {
  id            Int                         @id @default(autoincrement())
  name          String
  email         String                      @unique
  password      String
  otp           String?
  grade_id      Int
  grade         Grade                       @relation(fields: [grade_id], references: [id])
  board_id      Int
  board         Board                       @relation(fields: [board_id], references: [id])
  subjects      StudentSubjectMapper[]
  lectureGroups StudentLectureGroupMapper[]
  // quiz_answers  QuizQuestionAnswer[]
  quiz_attempts QuizAttempts[]
  completed_topics CompletedTopics[]
  notifications Notification[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

// handles many to many relationship

model StudentSubjectMapper {
  id         Int     @id @default(autoincrement())
  subject_id Int
  subject    Subject @relation(fields: [subject_id], references: [id])
  student_id Int
  student    Student @relation(fields: [student_id], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model LectureGroup {
  id         Int                         @id @default(autoincrement())
  name       String
  students   StudentLectureGroupMapper[]
  subject_id Int
  subject    Subject                     @relation(fields: [subject_id], references: [id])
  teacher_id Int
  teacher    Teacher                     @relation(fields: [teacher_id], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

// handles many to many relationship

model StudentLectureGroupMapper {
  id               Int          @id @default(autoincrement())
  lecture_group_id Int
  lecture_group    LectureGroup @relation(fields: [lecture_group_id], references: [id])
  student_id       Int
  student          Student      @relation(fields: [student_id], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Teacher {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  otp      String?
  lectureGroups LectureGroup[]
  notifications Notification[]
  // grades       TeacherGradeMapper[]
  // boards       TeacherBoardMapper[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Admin {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model CompletedTopics {
  id            Int    @id @default(autoincrement())
  student_id    Int 
  student Student @relation(fields: [student_id], references: [id])
  topic_id      Int
  topic Topic  @relation(fields: [topic_id], references: [id])
}

model Notification {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  is_read     Boolean  @default(false)

  to_teacher_id Int?
  to_teacher    Teacher?   @relation(fields: [to_teacher_id], references: [id])
  to_student_id Int?
  to_student    Student? @relation(fields: [to_student_id], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

// model TeacherSubjectMapper {
//   id         Int     @id @default(autoincrement())
//   subject_id Int
//   subject    Subject @relation(fields: [subject_id], references: [id])
//   teacher_id Int
//   teacher    Teacher @relation(fields: [teacher_id], references: [id])

//   status     Boolean  @default(true)
//   created_at DateTime @default(now())
//   updated_at DateTime @default(now())
// }

// model TeacherGradeMapper {
//   id         Int     @id @default(autoincrement())
//   grade_id   Int
//   grade      Grade   @relation(fields: [grade_id], references: [id])
//   teacher_id Int
//   teacher    Teacher @relation(fields: [teacher_id], references: [id])

//   status     Boolean  @default(true)
//   created_at DateTime @default(now())
//   updated_at DateTime @default(now())
// }

// model TeacherBoardMapper {
//   id         Int     @id @default(autoincrement())
//   board_id   Int
//   board      Board   @relation(fields: [board_id], references: [id])
//   teacher_id Int
//   teacher    Teacher @relation(fields: [teacher_id], references: [id])

//   status     Boolean  @default(true)
//   created_at DateTime @default(now())
//   updated_at DateTime @default(now())
// }
