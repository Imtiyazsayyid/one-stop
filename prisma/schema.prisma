// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String
  password   String
  gender     Gender
  profileImg String? @db.Text
  address    String? @db.Text

  userTypeId Int
  userType   UserType @relation(fields: [userTypeId], references: [id])

  teachers Teacher[]
  students Student[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

enum Gender {
  male
  female
  other
}

model UserType {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Course {
  id       Int    @id @default(autoincrement())
  name     String
  abbr     String
  duration Int // years

  description          String? @db.Text
  programOutcome       String? @db.Text
  departmentalStrength String? @db.Text
  aboutFacility        String? @db.Text
  eligibilty           String? @db.Text
  significance         String? @db.Text
  vision               String? @db.Text
  mission              String? @db.Text
  technicalActivities  String? @db.Text

  semesters Semester[]
  batches   Batch[]
  students Student[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Semester {
  id        Int    @id @default(autoincrement())
  semNumber Int
  duration  Int
  courseId  Int
  course    Course @relation(fields: [courseId], references: [id])

  subjects Subject[]
  batches  BatchSemesterMapper[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String
  abbr        String
  code        String       @unique
  subjectType SubjectType?
  credits     Int
  semesterId  Int
  semester    Semester     @relation(fields: [semesterId], references: [id])

  divisionTeacherMap DivisionTeacherSubjectMapper[]
  units              Unit[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Unit {
  id           Int            @id @default(autoincrement())
  number       Int
  name         String
  description  String?        @db.Text
  subjectId    Int
  subject      Subject        @relation(fields: [subjectId], references: [id])
  unitMaterial UnitMaterial[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model UnitMaterial {
  id     Int              @id @default(autoincrement())
  type   UnitMaterialType
  name   String
  link   String           @db.Text
  unitId Int
  unit   Unit             @relation(fields: [unitId], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

enum UnitMaterialType {
  img
  video
  pdf
}

enum SubjectType {
  core_subject
  core_subject_practical
  ability_enhancement_skill_course
  ability_enhancement_skill_practical
}

model Teacher {
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  roleId        Int
  role          TeacherRole @relation(fields: [roleId], references: [id])
  qualification String?     @db.Text
  experience    Int?
  about         String?     @db.Text

  awardsAndRecognition          String? @db.Text
  guestSpeakerAndResourcePerson String? @db.Text
  participationInCWTP           String? @db.Text // Conferences Workshops & Training Programs
  researchPublications          String? @db.Text
  certificationCourses          String? @db.Text
  booksOrChapter                String? @db.Text
  professionalMemberships       String? @db.Text

  divisionSubjectMap DivisionTeacherSubjectMapper[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model TeacherRole {
  id       Int       @id @default(autoincrement())
  name     String
  teachers Teacher[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Batch {
  id       Int      @id @default(autoincrement())
  fromDate DateTime
  toDate   DateTime

  courseId Int
  course   Course @relation(fields: [courseId], references: [id])

  semesters BatchSemesterMapper[]
  students  Student[]
  divisions Division[]
}

model BatchSemesterMapper {
  id         Int      @id @default(autoincrement())
  batchId    Int
  batch      Batch    @relation(fields: [batchId], references: [id])
  semesterId Int
  semester   Semester @relation(fields: [semesterId], references: [id])
}

model Division {
  id      Int    @id @default(autoincrement())
  name    String
  batchId Int
  batch   Batch  @relation(fields: [batchId], references: [id])

  students Student[]

  teacherSubjectMap DivisionTeacherSubjectMapper[]
}

model DivisionTeacherSubjectMapper {
  id         Int      @id @default(autoincrement())
  divisionId Int
  division   Division @relation(fields: [divisionId], references: [id])
  teacherId  Int?
  teacher    Teacher? @relation(fields: [teacherId], references: [id])
  subjectId  Int
  subject    Subject  @relation(fields: [subjectId], references: [id])
}

model Student {
  id         Int    @id @default(autoincrement())
  userId     Int
  user       User   @relation(fields: [userId], references: [id])
  rollNumber String

  courseId   Int
  course     Course  @relation(fields: [courseId], references: [id])
  batchId    Int
  batch      Batch    @relation(fields: [batchId], references: [id])
  divisionId Int
  division   Division @relation(fields: [divisionId], references: [id])

  studentCertificates StudentCertificate[]
  studentDocuments    StudentDocuments[]

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model StudentCertificate {
  id        Int                 @id @default(autoincrement())
  type      StudentMaterialType
  name      String
  link      String              @db.Text
  studentId Int
  student   Student             @relation(fields: [studentId], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model StudentDocuments {
  id        Int                 @id @default(autoincrement())
  type      StudentMaterialType
  name      String
  link      String              @db.Text
  studentId Int
  student   Student             @relation(fields: [studentId], references: [id])

  status     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

enum StudentMaterialType {
  img
  pdf
}
